@startuml components

package providers {

    abstract AbstractProvider {
        ReportConfiguration projectRequest
        API api 
        Gson gson
        +AbstractProvider(ReportConfiguration projectRequest)
        +request(String request) : JsonObject
        +stringRequest(String request) : String
    }

    class ComponentList {
        String "COMPONENT_FIELD"
        List<Component> componentList;
        +ComponentList(ReportConfiguration projectRequest)
        +getComponentList() : List<Component>
    }

    class IssueList {
        String "ISSUE_FIELD" 
        List<Issue> issueList;
        +IssueList(ReportConfiguration projectRequest)
        +getIssueList() : List<Issue>
    }

    class LanguageList {
        String "LANUGAGE_FIELD" 
        List<Language> lanugageList;
        +LanguageList(ReportConfiguration projectRequest)
        +getLanguageList() : List<Language>
    }

    class ProjectList {
        String "PROJECT_FIELD" 
        List<Project> projectList;
        +ProjectList(ReportConfiguration projectRequest)
        +getProjectList() : List<Project>
    }
    
    class MetricList {
        String "METRIC_FIELD" 
        Map<String,List<Measure>> metricMap
        +MetricList(ReportConfiguration projectRequest)
        +getMetricList() : List<Metric>
    }

}

package factories {
    class ProviderFactory {
        ReportConfiguration projectRequest
        +ProviderFactory(ReportConfiguration projectRequest)
        +create(final Class<T> providerClass) : <T> AbstractProvider 
    }

    class ReportFactory {
        ExportConfiguration exportConf
        +ReportFactory(ReportConfiguration projectRequest)
        +create() : void
    }

    class ReportModelFactory {
        ReportConfiguration projectRequest
        +ReportModelFactory(ReportConfiguration projectRequest)
    }

    class ServerFactory {
        +ServerFactory()
        +create() : void
    }
}

package exporters { 
    abstract AbstractExporter {

    }

    class CSVExporter {

    }
}

package models {
    class Comment {
        String key
        String login
        String htmlText
        String markdown
        String updatable
        String createdAt
    }

    class Component {
        String id;
        String name;
        String qualifier;
        Language language;
        String path;
        List<Measure> measureList;
    }


    class Issue {
         String severity
         String key
         String rule
         String component
         String project
         String line
         String resolution
         String effort
         String type
         String severity
         String language
         List<Comment> commentList
    }

    class Language {
        String key;
        String name;
    }

    class Measure {
        String metric
        String value
    }

    class Project {
        String key
        String name
        String branch
        String organization
        String version
        String description
        LanguageList laguangeList
    }

    class Report {
        String projectName
        String projectAuthor
        String projectDate
        Project project
        IssueList unconfirmedIssues
        IssueList confirmedIssues
        MeasureList measureList
        ComponentList componentList
    }

    class Metric {
        String key
        Enum type
        String name
        String description
        String domain

    }
}

package configuration {
    class SonarRequestList {
        List<ReportConfiguration> list
        ExportConfiguration exportConf
        +create(String[] args) : void
    }

    class ReportConfiguration {
        String token
        String project
        String branch
        String author
        String version
    }

    
    class SonarQubeServer {
        String url
        boolean status
        int versionMajor
        int versionMinor
        int versionRevision
        int versionBuild
        boolean supported
    }

    class Args {
        List<Metric> metricList
        List<Issue> issueList
        List<String> issueTypeList
        List<String> componentKeyList
        ReportConfig reportConfig
    }

    class ExportConfiguration {
        boolean enableCSV
        boolean enableDOC
    }

    enum API {
        String call
        +API(String call)
        +getCall() : String
    }
}

package view <<Node>> {
    class Browser {
        +main() : void
    }

    class CommandLine {
        +main() : void
    }

    class Plugin {
        +main() : void
    }
}

IssueList -up-|> AbstractProvider
ComponentList -up-|> AbstractProvider
LanguageList -up-|> AbstractProvider
MetricList -up-|> AbstractProvider
ProjectList -up-|> AbstractProvider
MetricList -[hidden]> ComponentList

ComponentList -down-> Component
IssueList -down-> Issue
LanguageList -down-> Language
ProjectList -down-> Project
Issue -down-> Comment
MetricList -down-> Metric
MetricList -down-> Measure
Metric -> Measure
Project -> LanguageList

ReportModelFactory -> Report
ProviderFactory -down-> AbstractProvider
ReportFactory -down-> AbstractExporter
ServerFactory -up-> SonarQubeServer
ReportModelFactory -> ProviderFactory
ReportFactory -> ExportConfiguration

CSVExporter -up-|> AbstractExporter

CommandLine -down-> SonarRequestList
Browser -down-> SonarRequestList
Plugin -down-> SonarRequestList
SonarRequestList -left-> ReportConfiguration
SonarRequestList -down-> ReportModelFactory

/'
note "CreaciÃ³n de las listas de Modelos" as N1
note "Instacia de Server" as N2
note "MAIN para crear el Report" as N3
note "Crea diferentes exportables" as N4
N1 -up-> ProviderFactory
N2 -down-> ServerFactory
N3 -down-> ReportModelFactory
N4 -down-> ReportFactory  
`/
@enduml